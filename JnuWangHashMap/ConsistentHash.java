package com.JnuWangHashMap;

public class ConsistentHash {
    /**
     * 一致性哈希：理解就是负载均衡，即让每台机器的负载都差不多。
     * 传统负载均衡是将机器进行hash分配，进来新的请求就通过hash找到处理数据的机器，但是在增加机器时，又要重新计算所有机
     * 器的hash，这样效率很低。
     * 于是后面对其进行改进，在一个环上对机器进行分配，在换种的数据请求顺时针给到离它最近的机器去处理，这样的方式，对于
     * 怎么找到数据来说，就将机器的hash放进数组放在客户端，然后当新请求进来时，对该请求进行同样的hash，在数组中二分法查
     * 找第一个比该hash大的，就是要处理的机器。这样对于数据迁移的代价也比较小
     * 这样设计的又一个问题就是hash函数只是在大样本下均匀分布，在增加机器的时候，并不能保证每台机器都平均分配。
     * 因此引入虚拟节点的概念，给每台机器分配一样的虚拟节点，让虚拟节点去进行竞争环的位置。现在大型的公司负载均衡都是这
     * 种方法或者该方法的变形。
     */
}
